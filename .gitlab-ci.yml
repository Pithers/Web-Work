# gitlab yml file for ci
---
image: docker:latest
# When using dind, it's wise to use the overlayfs driver for
# improved performance.
variables:
  DOCKER_DRIVER: overlay
services:
  - docker:dind

stages:
  - build
  - lint
  - test
  - minify
  - deploy

# Run pylint_django on site/app code given default app/site folder names
pylint:
  image: "$CI_REGISTRY_IMAGE:testing"
  stage: lint
  script:
    - python -V
    - pylint --load-plugins pylint_django --disable=missing-docstring ./testsite/testsite
    - pylint --load-plugins pylint_django --disable=missing-docstring ./testsite/myapp

scsslint:
  image: "$CI_REGISTRY_IMAGE:testing"
  stage: lint
  script:
    - sass-lint ./testsite/myapp/static/scss

# Build test container
build:
  stage: build
  script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:testing .
    - docker push $CI_REGISTRY_IMAGE:testing

# Run django unit testing/coverage generation on app code
test:
  stage: test
  image: "$CI_REGISTRY_IMAGE:testing"
  script:
    - cd /code/testsite
    - python manage.py migrate
    - coverage --version
    - coverage run --source='.' ./manage.py test
    - coverage report --skip-covered

# Minify code before deployment
minify:
  stage: minify
  image: "$CI_REGISTRY_IMAGE:testing"
  script:
    - css-html-js-minify.py ./testsite/myapp/static

# Create latest docker container if all the tests/lint passes on master
deploy:
  only:
    - master
  stage: deploy
  script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
